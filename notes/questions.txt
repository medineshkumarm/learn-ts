Day 1:
1. What is Typescript and Why should I use it?
2. Javascript vs Typescript

3. What are the features of Typescript? And It's usecase
4. Type system in Typescript ie. Typesafety. Why it is important?
5. Type annotatoin and Type inference


1. What is Typescript and Why should I use it?
    - TypeScript is a superset of JavaScript that 
        - adds static typing
        - making it easier to catch errors during development.
    - It's used to write more reliable, scalable, and maintainable code, especially in large projects.
    eg: 
        let msg: string = "hello there!";
        msg = 2;        //Type 'number' is not assignable to type 'string'.
        console.log(msg);

2. Javascript vs Typescript
    - JavaScript is a 
        - dynamic, loosely-typed language,
    - while TypeScript offers
        - static typing and catches errors at compile-time.
    - TypeScript requires compilation to JavaScript but improves code clarity and reduces runtime bugs.
    eg: JS:
        let myname = "donnie yen";
        myname = 123;
        console.log(myname); //no errors

        TS:
        let myname = "donnie yen";
        myname = 123;   //error: Type 'number' is not assignable to type 'string'
        console.log(myname); 

3. What are the features of Typescript? And It's usecase
    - TypeScript features include:  
        - static typing, interfaces, classes, modules, and advanced IDE support.
    - It's ideal for large applications and projects where maintainability and code quality are critical, like enterprise software or SPAs.
    eg: 
        interface Person {
        name: string;
        age: number;
        }

        function greet(person: Person) {
            console.log(`Hello, ${person.name}`);
        }
4. Type system in Typescript ie. Typesafety. Why it is important?
    - TypeScript's type system enforces type safety , meaning you specify types for variables, functions, and structures.
    - This catches type-related errors early and ensures the code behaves as expected, reducing bugs and improving stability.
    eg: 
        function add(a: number, b: number): number {
            return a + b;
        }
        add(5, "10"); // Error: Argument of type 'string' is not assignable to parameter of type 'number'
5. Type annotatoin and Type inference
    - Type annotation allows you to specify explicit types for variables
    - while type inference enables TypeScript to determine types based on context automatically.
    - Together, they make code easier to understand and catch errors without needing excessive manual typing.
    eg:
    let age: number = 25; // Type annotation
    let greeting = "Hello"; // Type inference
    greeting = 42; // Error: Type 'number' is not assignable to type 'string'

Quick thoughts:
1. Diff btw '' and "" in js
2. two types of knowledge from ts:
    1. Let's analyse what interface does to Typescript and it's syntax
    2. Design Pattern with ts: How do we use interface to write reusable code

3. Why shoud we care about Types?
    Types help prevent runtime errors by catching mistakes early during development, 
    making the code more robust. In TypeScript, types improve readability,
    provide better autocompletion in IDEs, and enable safer refactoring,
    especially in large-scale applications.

_____________________________________________________________________________________________

Day 2 : 

1. When to use Type annotation?
2. What is any type ? why should we correct it;
3. Why 'never' should not be used?
4. What is destructing?
5. when to use ',' and ';' in annotation?
6. Typed arrays? when to use it?
7. What's a Tuple and why should we use it?
8. why tuple is not use in realworld often?

9. What is an interface?
    - what are the features that we should interface in our project
    - and more
10. what is a class in js/ts?
11. Get to know about ES15 and TS
12. Why we class Method Modifiers ie. public , private, protected?
13. Where we use classes ?


1. When to use Type annotation?
    - when a function returns the 'any' type and we need to clarify the value
    - when we declare a variable on one line then initialize it later
    - when we want a variable to have a type that can't be inferred